#########################
#  NGINX Redirects Map  #
#########################

# Every line is one rule. A rule has one source for matching and one destination
# to redirect to. The rules are evaluated from top to bottom until a match is
# found. More specific rules should come before more general ones. 
# The rule format is: <source> <destination>;
#
# Source: Can be a string literal or a regular expression. It will be tested
# against the nginx variable `$host$uri`.
#
# Destination: Can contain nginx variables, including regular expression matches
# from the source. Some useful variables are:
# - $scheme: Request scheme, “http” or “https”
# - $request_uri: The full original request path with query string
# - $query_string: Request query string
#
# Check the NGINX docs for details about the format and available variables.
# - https://nginx.org/en/docs/http/ngx_http_map_module.html#map
# - https://nginx.org/en/docs/varindex.html

##############
#  Examples  #
##############

# Redirect www to non-www (www.example.com/blog?page=2 -> example.com/blog?page=2)
# ~^www\.example\.com/   $scheme://example.com$request_uri;
#
# Redirect non-www to www (example.com/blog?page=2 -> www.example.com/blog?page=2)
# ~^example\.com/   $scheme://www.example.com$request_uri;
#
# Redirect from one domain to another (example.com/blog?page=2 -> example.net/blog?page=2)
# ~^example\.com/   $scheme://example.net$request_uri;
#
# Redirect frome one domain to another,
# removing a subfolder (example.com/legacy/blog?page=2 -> example.net/blog?page=2)
# ~*^example\.com/legacy/(.*)   $scheme://example.net/$1$is_args$query_string;
#
# Redirect example.com/blog (EXACTLY) to example.net/ (example.com/blog -> example.net)
# Does not match, e.g., example.com/about-us, example.com/blog?page=2, or example.com/legacy/blog
# Does not preserve original request path or query string
# example.com/blog   $scheme://example.net;

#####################
#  Add Rules Below  #
#####################
